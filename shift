local cloneref = cloneref or function(instance)
    return instance
end

local ShiftLockScreenGui = Instance.new("ScreenGui")
local ShiftLockButton = Instance.new("ImageButton")
local ShiftlockCursor = Instance.new("ImageLabel")

local CoreGui = cloneref(game:GetService("CoreGui"))
local Players = cloneref(game:GetService("Players"))
local RunService = cloneref(game:GetService("RunService"))
local ContextActionService = cloneref(game:GetService("ContextActionService"))
local UserInputService = cloneref(game:GetService("UserInputService"))

local Player = Players.LocalPlayer
local States = {
    Off = "rbxasset://textures/ui/mouseLock_off@2x.png",
    On = "rbxasset://textures/ui/mouseLock_on@2x.png",
    Lock = "rbxasset://textures/MouseLockedCursor.png",
    Lock2 = "rbxasset://SystemCursors/Cross"
}
local MaxLength = 900000
local EnabledOffset = CFrame.new(1.7, 0, 0)
local DisabledOffset = CFrame.new(-1.7, 0, 0)
local Active

ShiftLockScreenGui.Name = "Shiftlock (CoreGui)"
ShiftLockScreenGui.Parent = CoreGui
ShiftLockScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ShiftLockScreenGui.ResetOnSpawn = false

ShiftLockButton.Parent = ShiftLockScreenGui
ShiftLockButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ShiftLockButton.BackgroundTransparency = 1.000
ShiftLockButton.Position = UDim2.new(0.7, 0, 0.75, 0)
ShiftLockButton.Size = UDim2.new(0.045, 0, 0.045, 0)
ShiftLockButton.SizeConstraint = Enum.SizeConstraint.RelativeXX
ShiftLockButton.Image = States.Off

ShiftlockCursor.Name = "Shiftlock Cursor"
ShiftlockCursor.Parent = ShiftLockScreenGui
ShiftlockCursor.Image = States.Lock
ShiftlockCursor.Size = UDim2.new(0.03, 0, 0.03, 0)
ShiftlockCursor.Position = UDim2.new(0.5, 0, 0.5, 0)
ShiftlockCursor.AnchorPoint = Vector2.new(-5, 13)
ShiftlockCursor.SizeConstraint = Enum.SizeConstraint.RelativeXX
ShiftlockCursor.BackgroundTransparency = 1
ShiftlockCursor.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
ShiftlockCursor.Visible = false

local function ha(e, aoc)  
    local d, i, p  
    local input
  
    local function cs(x)  
        return (x.Position - i).Magnitude < 5  
    end  
  
    local function u(x)  
        local d = x.Position - i  
        e.Position = UDim2.new(p.X.Scale, p.X.Offset + d.X, p.Y.Scale, p.Y.Offset + d.Y)  
    end  
  
    e.InputBegan:Connect(function(x)  
        if x.UserInputType == Enum.UserInputType.MouseButton1 or x.UserInputType == Enum.UserInputType.Touch then  
            d, i, p = true, x.Position, e.Position  
        end  
    end)  
  
    e.InputChanged:Connect(function(x)  
        if x.UserInputType == Enum.UserInputType.MouseMovement or x.UserInputType == Enum.UserInputType.Touch then  
            input = x  
        end  
    end)  
  
    UserInputService.InputChanged:Connect(function(x)  
        if x == input and d then  
            pcall(function() u(x) end)  
        end  
    end)  
  
    UserInputService.InputEnded:Connect(function(x)  
        if d and (x.UserInputType == Enum.UserInputType.MouseButton1 or x.UserInputType == Enum.UserInputType.Touch) then  
            d = false  
            if cs(x) then  
                pcall(aoc)  
            end  
        end  
    end)  
end

local function ShiftLock()
    if not Active then
        Active =
            RunService.RenderStepped:Connect(
            function()
                Player.Character.Humanoid.AutoRotate = false
                ShiftLockButton.Image = States.On
                ShiftlockCursor.Visible = true
                Player.Character.HumanoidRootPart.CFrame =
                    CFrame.new(
                    Player.Character.HumanoidRootPart.Position,
                    Vector3.new(
                        workspace.CurrentCamera.CFrame.LookVector.X * MaxLength,
                        Player.Character.HumanoidRootPart.Position.Y,
                        workspace.CurrentCamera.CFrame.LookVector.Z * MaxLength
                    )
                )
                workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame * EnabledOffset
                workspace.CurrentCamera.Focus =
                    CFrame.fromMatrix(
                    workspace.CurrentCamera.Focus.Position,
                    workspace.CurrentCamera.CFrame.RightVector,
                    workspace.CurrentCamera.CFrame.UpVector
                ) * EnabledOffset
            end
        )
    else
        Player.Character.Humanoid.AutoRotate = true
        ShiftLockButton.Image = States.Off
        workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame * DisabledOffset
        ShiftlockCursor.Visible = false
        pcall(
            function()
                Active:Disconnect()
                Active = nil
            end
        )
    end
end

ha(ShiftLockButton, ShiftLock)

local ShiftLockAction = ContextActionService:BindAction("Shift Lock", ShiftLock, false, "On")
ContextActionService:SetPosition("Shift Lock", UDim2.new(0.8, 0, 0.8, 0))

return {} and ShiftLockAction
